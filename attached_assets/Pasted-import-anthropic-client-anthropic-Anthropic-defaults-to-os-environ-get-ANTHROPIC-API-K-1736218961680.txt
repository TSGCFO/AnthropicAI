import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)

# Replace placeholders like {{PROJECT_FILES}} with real values,
# because the SDK does not support variables.
message = client.messages.create(
    model="claude-3-5-sonnet-20241022",
    max_tokens=6460,
    temperature=0,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an AI assistant specialized in Django development. Your role is to help users complete tasks related to their Django projects. You will be provided with the project structure and a specific task description. Your goal is to understand the task, analyze the project structure, and provide the necessary code changes or additions to complete the task.\n\nHere is the project structure you have access to:\n\n<project_files>\n{{PROJECT_FILES}}\n</project_files>\n\nPlease review the project structure carefully. You'll need to refer to this information throughout the task.\n\nNow, here's the specific task you need to complete:\n\n<task_description>\n{{TASK_DESCRIPTION}}\n</task_description>\n\nTo approach this task, follow these steps:\n\n1. Carefully read and understand the task description.\n2. Analyze the project structure and identify the relevant files that may need to be modified or created.\n3. If you need to review the content of a specific file, clearly state the file name and request its contents. For example: \"To proceed, I need to see the contents of 'myapp/models.py'. Please provide this file.\"\n4. Once you have all necessary information, plan your approach to completing the task, considering Django best practices and the project's existing structure.\n5. If the task involves modifying existing files, provide the complete updated code for each file, including the changes you've made.\n6. If the task requires creating new files, provide the full content for these new files.\n7. Explain your changes or additions, highlighting how they address the task requirements.\n\nBefore providing your solution, wrap your task breakdown inside <task_breakdown> tags. In this breakdown:\na. List and briefly describe each relevant file in the project structure\nb. Identify key Django components (models, views, templates) that may need modification\nc. Outline potential code changes or additions for each relevant file\n\nThis will ensure a thorough understanding of the requirements and help you formulate the best solution.\n\nWhen providing your solution, use the following format:\n\n<solution>\n<file_changes>\n[List the files that need to be modified or created]\n</file_changes>\n\n<code_updates>\n[For each file that needs to be modified or created, provide the full code with your changes or additions]\n</code_updates>\n\n<explanation>\n[Explain your changes or additions, and how they fulfill the task requirements]\n</explanation>\n</solution>\n\nHere's a generic example of how your solution should be structured:\n\n<solution>\n<file_changes>\n- myapp/models.py (modified)\n- myapp/views.py (modified)\n- myapp/templates/new_template.html (created)\n</file_changes>\n\n<code_updates>\nFile: myapp/models.py\n```python\nfrom django.db import models\n\nclass ExistingModel(models.Model):\n    existing_field = models.CharField(max_length=100)\n    new_field = models.IntegerField(default=0)  # Added new field\n\nclass NewModel(models.Model):  # Added new model\n    name = models.CharField(max_length=200)\n    description = models.TextField()\n```\n\nFile: myapp/views.py\n```python\nfrom django.shortcuts import render\nfrom .models import ExistingModel, NewModel\n\ndef new_view(request):\n    # New view logic here\n    return render(request, 'new_template.html', context)\n```\n\nFile: myapp/templates/new_template.html\n```html\n{% extends 'base.html' %}\n\n{% block content %}\n    <h1>New Template</h1>\n    <!-- New template content here -->\n{% endblock %}\n```\n</code_updates>\n\n<explanation>\nThese changes accomplish the task by:\n1. Adding a new field to the existing model in models.py\n2. Creating a new model in models.py\n3. Adding a new view in views.py to handle the new functionality\n4. Creating a new template file to display the new data\n[Further explanation of how these changes fulfill the task requirements]\n</explanation>\n</solution>\n\nAdditional guidelines:\n- Ensure your code follows PEP 8 style guidelines for Python.\n- Use Django best practices and conventions in your solution.\n- If you're unsure about any aspect of the project structure or existing code, ask for clarification before proceeding.\n- If the task cannot be completed with the given information or requires additional steps outside of coding (e.g., database migrations), mention this in your explanation.\n\nRemember, your goal is to provide a complete and working solution that fits seamlessly into the existing Django project structure. If you need any additional information or clarification about the project or the task, please ask before providing your solution."
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<task_breakdown>\nRelevant files in the rules app frontend structure:\n\nTemplates:\n1. rules/templates/rules/advanced_rule_form.html - Form for advanced rules\n2. rules/templates/rules/components/sku_selector.html - SKU selector component\n3. rules/templates/rules/create_rule.html - Rule creation template\n4. rules/templates/rules/create_rule_group.html - Rule group creation template\n5. rules/templates/rules/rule_form.html - Basic rule form\n6. rules/templates/rules/rule_group_detail.html - Rule group details\n7. rules/templates/rules/rule_group_form.html - Rule group form\n8. rules/templates/rules/rule_group_list.html - List of rule groups\n\nStatic files:\n1. static/css/rules/advanced-rule.css - Styles for advanced rules\n2. static/css/rules/json-editor.css - JSON editor styles\n3. static/css/rules/sku-selector.css - SKU selector styles\n4. static/js/rules/advanced-rule-builder.js - Advanced rule builder logic\n5. static/js/rules/advanced-rule.js - Advanced rule functionality\n6. static/js/rules/json-editor.js - JSON editor functionality\n7. static/js/rules/rule-group.js - Rule group functionality\n8. static/js/rules/sku-selector.js - SKU selector functionality\n\nTo proceed with fixing the frontend files, I'll need to see the contents of these files to identify specific issues. Could you please provide the contents of:\n\n1. The template files in rules/templates/rules/\n2. The CSS files in static/css/rules/\n3. The JavaScript files in static/js/rules/\n\nThis will allow me to identify any problems and provide appropriate fixes.\n</task_breakdown>\n\nTo provide a comprehensive solution, I'll need to see the actual contents of these files to identify specific issues. Could you please share the contents of these files, or describe the specific frontend issues you're experiencing? This could include:\n\n1. Visual/styling problems\n2. JavaScript functionality issues\n3. Template rendering problems\n4. Component integration issues\n5. Specific error messages or console errors\n\nOnce you provide this information, I can offer a detailed solution with specific fixes for each affected file."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "project_files\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Create Rule Group</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            padding: 0;\n            line-height: 1.6;\n            background-color: #f4f4f4;\n        }\n        header, footer {\n            background-color: #333;\n            color: #fff;\n            padding: 10px 20px;\n            text-align: center;\n        }\n        header nav a, footer a {\n            color: #fff;\n            text-decoration: none;\n            margin: 0 10px;\n        }\n        main {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            max-width: 600px;\n            margin: 20px auto;\n        }\n        form p {\n            margin-bottom: 15px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        a {\n            text-decoration: none;\n            color: #007BFF;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Create Rule Group</h1>\n        <nav>\n            <a href=\"/\">Home</a>\n            <a href=\"{% url 'rule_group_list' %}\">Rule Groups</a>\n        </nav>\n    </header>\n\n    <main>\n        <h2>Create a New Rule Group</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Save Rule Group</button>\n        </form>\n    </main>\n\n    <footer>\n        <p>&copy; 2024 Your Company</p>\n    </footer>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Rule</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            padding: 0;\n            line-height: 1.6;\n            background-color: #f4f4f4;\n        }\n        header, footer {\n            background-color: #333;\n            color: #fff;\n            padding: 10px 20px;\n            text-align: center;\n        }\n        header nav a, footer a {\n            color: #fff;\n            text-decoration: none;\n            margin: 0 10px;\n        }\n        main {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            max-width: 600px;\n            margin: 20px auto;\n        }\n        form p {\n            margin-bottom: 15px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        a {\n            text-decoration: none;\n            color: #007BFF;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Add Rule to {{ group.customer_service }}</h1>\n        <nav>\n            <a href=\"/\">Home</a>\n            <a href=\"{% url 'rule_group_list' %}\">Rule Groups</a>\n            <a href=\"{% url 'rule_group_detail' group.id %}\">Back to Rule Group</a>\n        </nav>\n    </header>\n\n    <main>\n        <h2>Add Rule to Rule Group: {{ group }}</h2>\n        <form method=\"post\" id=\"rule-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Save Rule</button>\n        </form>\n        <a href=\"{% url 'rule_group_detail' group.id %}\">Cancel</a>\n    </main>\n\n    <footer>\n        <p>&copy; 2024 Your Company</p>\n    </footer>\n\n    <script type=\"text/javascript\">\n        // JavaScript to dynamically change the value field based on the selected field\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            const fieldElement = document.querySelector('select[name$=\"field\"]');\n            const valueElementWrapper = document.querySelector('input[name$=\"value\"]').parentNode;\n\n            function updateValueField() {\n                const selectedField = fieldElement.value;\n\n                if (selectedField === 'sku') {\n                    valueElementWrapper.innerHTML = `\n                        <select name=\"value\">\n                            <option value=\"SKU1\">SKU1</option>\n                            <option value=\"SKU2\">SKU2</option>\n                            <!-- Add more SKUs as needed -->\n                        </select>\n                    `;\n                } else if (selectedField === 'quantity' || selectedField === 'case_picks') {\n                    valueElementWrapper.innerHTML = `\n                        <input type=\"number\" name=\"value\" min=\"1\">\n                    `;\n                } else {\n                    valueElementWrapper.innerHTML = `\n                        <input type=\"text\" name=\"value\">\n                    `;\n                }\n            }\n\n            fieldElement.addEventListener('change', updateValueField);\n            updateValueField();  // Call on page load to set the initial state\n        });\n    </script>\n</body>\n</html>\n"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Based on the provided templates, I'll help improve the frontend files for the rules app. Here's my solution:\n\n<solution>\n<file_changes>\n1. Create a new base template for rules\n2. Extract CSS to dedicated stylesheet\n3. Improve JavaScript organization\n4. Add modern UI components and better form styling\n</file_changes>\n\n<code_updates>\n1. First, let's create a base template for rules (rules/templates/rules/base_rules.html):\n\n```html\n{% extends 'base.html' %}\n{% load static %}\n\n{% block extra_css %}\n<link rel=\"stylesheet\" href=\"{% static 'css/rules/rules.css' %}\">\n{% endblock %}\n\n{% block content %}\n<div class=\"rules-container\">\n    <div class=\"rules-header\">\n        {% block rules_header %}{% endblock %}\n    </div>\n    \n    <div class=\"rules-content\">\n        {% block rules_content %}{% endblock %}\n    </div>\n</div>\n{% endblock %}\n\n{% block extra_js %}\n<script src=\"{% static 'js/rules/rules.js' %}\"></script>\n{% block rules_js %}{% endblock %}\n{% endblock %}\n```\n\n2. Updated create_rule_group.html:\n\n```html\n{% extends 'rules/base_rules.html' %}\n{% load static %}\n\n{% block rules_header %}\n<h1>Create Rule Group</h1>\n<nav class=\"rules-nav\">\n    <a href=\"/\" class=\"nav-link\">Home</a>\n    <a href=\"{% url 'rule_group_list' %}\" class=\"nav-link\">Rule Groups</a>\n</nav>\n{% endblock %}\n\n{% block rules_content %}\n<div class=\"card\">\n    <div class=\"card-header\">\n        <h2>Create a New Rule Group</h2>\n    </div>\n    <div class=\"card-body\">\n        <form method=\"post\" class=\"rules-form\">\n            {% csrf_token %}\n            {% for field in form %}\n            <div class=\"form-group\">\n                {{ field.label_tag }}\n                {{ field }}\n                {% if field.help_text %}\n                <small class=\"help-text\">{{ field.help_text }}</small>\n                {% endif %}\n                {% if field.errors %}\n                <div class=\"error-message\">{{ field.errors }}</div>\n                {% endif %}\n            </div>\n            {% endfor %}\n            <div class=\"form-actions\">\n                <button type=\"submit\" class=\"btn btn-primary\">Save Rule Group</button>\n                <a href=\"{% url 'rule_group_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n            </div>\n        </form>\n    </div>\n</div>\n{% endblock %}\n```\n\n3. Updated create_rule.html:\n\n```html\n{% extends 'rules/base_rules.html' %}\n{% load static %}\n\n{% block rules_header %}\n<h1>Add Rule to {{ group.customer_service }}</h1>\n<nav class=\"rules-nav\">\n    <a href=\"/\" class=\"nav-link\">Home</a>\n    <a href=\"{% url 'rule_group_list' %}\" class=\"nav-link\">Rule Groups</a>\n    <a href=\"{% url 'rule_group_detail' group.id %}\" class=\"nav-link\">Back to Rule Group</a>\n</nav>\n{% endblock %}\n\n{% block rules_content %}\n<div class=\"card\">\n    <div class=\"card-header\">\n        <h2>Add Rule to Rule Group: {{ group }}</h2>\n    </div>\n    <div class=\"card-body\">\n        <form method=\"post\" id=\"rule-form\" class=\"rules-form\">\n            {% csrf_token %}\n            {% for field in form %}\n            <div class=\"form-group\">\n                {{ field.label_tag }}\n                {{ field }}\n                {% if field.help_text %}\n                <small class=\"help-text\">{{ field.help_text }}</small>\n                {% endif %}\n                {% if field.errors %}\n                <div class=\"error-message\">{{ field.errors }}</div>\n                {% endif %}\n            </div>\n            {% endfor %}\n            <div class=\"form-actions\">\n                <button type=\"submit\" class=\"btn btn-primary\">Save Rule</button>\n                <a href=\"{% url 'rule_group_detail' group.id %}\" class=\"btn btn-secondary\">Cancel</a>\n            </div>\n        </form>\n    </div>\n</div>\n{% endblock %}\n\n{% block rules_js %}\n<script src=\"{% static 'js/rules/rule-form.js' %}\"></script>\n{% endblock %}\n```\n\n4. New CSS file (static/css/rules/rules.css):\n\n```css\n/* Rules Container */\n.rules-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n/* Header Styles */\n.rules-header {\n    margin-bottom: 30px;\n}\n\n.rules-header h1 {\n    color: #333;\n    margin-bottom: 15px;\n}\n\n.rules-nav {\n    display: flex;\n    gap: 15px;\n    margin-bottom: 20px;\n}\n\n.nav-link {\n    color: #007bff;\n    text-decoration: none;\n    padding: 5px 10px;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n}\n\n.nav-link:hover {\n    background-color: #f8f9fa;\n    text-decoration: none;\n}\n\n/* Card Styles */\n.card {\n    background: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    margin-bottom: 20px;\n}\n\n.card-header {\n    padding: 15px 20px;\n    border-bottom: 1px solid #eee;\n}\n\n.card-body {\n    padding: 20px;\n}\n\n/* Form Styles */\n.rules-form {\n    max-width: 600px;\n}\n\n.form-group {\n    margin-bottom: 20px;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: 500;\n    color: #333;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    padding: 8px 12px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 14px;\n}\n\n.help-text {\n    display: block;\n    margin-top: 5px;\n    color: #666;\n    font-size: 12px;\n}\n\n.error-message {\n    color: #dc3545;\n    font-size: 12px;\n    margin-top: 5px;\n}\n\n/* Buttons */\n.form-actions {\n    display: flex;\n    gap: 10px;\n    margin-top: 20px;\n}\n\n.btn {\n    padding: 8px 16px;\n    border-radius: 4px;\n    font-weight: 500;\n    cursor: pointer;\n    border: none;\n    transition: background-color 0.3s;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: white;\n}\n\n.btn-primary:hover {\n    background-color: #0056b3;\n}\n\n.btn-secondary {\n    background-color: #6c757d;\n    color: white;\n}\n\n.btn-secondary:hover {\n    background-color: #545b62;\n}\n```\n\n5. New JavaScript file (static/js/rules/rule-form.js):\n\n```javascript\nclass RuleForm {\n    constructor() {\n        this.form = document.getElementById('rule-form');\n        this.fieldSelect = document.querySelector('select[name$=\"field\"]');\n        this.valueContainer = document.querySelector('input[name$=\"value\"]').parentNode;\n        \n        this.initialize();\n    }\n\n    initialize() {\n        this.fieldSelect.addEventListener('change', () => this.updateValueField());\n        this.updateValueField();\n    }\n\n    updateValueField() {\n        const selectedField = this.fieldSelect.value;\n        let inputHTML = '';\n\n        switch(selectedField) {\n            case 'sku':\n                inputHTML = this.createSkuSelect();\n                break;\n            case 'quantity':\n            case 'case_picks':\n                inputHTML = this.createNumberInput();\n                break;\n            default:\n                inputHTML = this.createTextInput();\n        }\n\n        this.valueContainer.innerHTML = inputHTML;\n    }\n\n    createSkuSelect() {\n        return `\n            <select name=\"value\" class=\"form-control\">\n                <option value=\"\">Select SKU</option>\n                <option value=\"SKU1\">SKU1</option>\n                <option value=\"SKU2\">SKU2</option>\n            </select>\n        `;\n    }\n\n    createNumberInput() {\n        return `\n            <input type=\"number\" \n                   name=\"value\" \n                   min=\"1\" \n                   class=\"form-control\"\n                   required>\n        `;\n    }\n\n    createTextInput() {\n        return `\n            <input type=\"text\" \n                   name=\"value\" \n                   class=\"form-control\"\n                   required>\n        `;\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    new RuleForm();\n});\n```\n\n</code_updates>\n\n<explanation>\nThe improvements made include:\n\n1. Created a base template for rules to maintain consistency and reduce code duplication.\n\n2. Separated concerns by:\n   - Moving CSS to a dedicated stylesheet\n   - Moving JavaScript to a separate file\n   - Using proper class-based JavaScript organization\n\n3. Enhanced the UI with:\n   - Better structured HTML using semantic elements\n   - Improved form layout and styling\n   - Consistent card-based design\n   - Responsive navigation\n   - Better button styling and interactions\n\n4. Improved form handling:\n   - Better error message display\n   - Help text styling\n   - More organized form groups\n   - Better field layouts\n\n5. Added modern features:\n   - Proper spacing and typography\n   - Smooth transitions and hover effects\n   - Box shadows for depth\n   - Consistent color scheme\n   - Better form validation visualization\n\n6. Improved JavaScript organization:\n   - Used class-based structure\n   - Better event handling\n   - More maintainable code\n   - Cleaner value field updates\n\nThese changes will make the rules interface more user-friendly, maintainable, and consistent with modern web standards while keeping the existing functionality intact.\n\nTo implement these changes:\n\n1. Create the new files in their respective directories\n2. Update the templates to extend the new base template\n3. Remove inline styles from the original templates\n4. Ensure all static files are properly collected and served\n\nRemember to run `python manage.py collectstatic` after implementing these changes to ensure all static files are properly served.\n</explanation>\n</solution>"
                }
            ]
        }
    ]
)
print(message.content)